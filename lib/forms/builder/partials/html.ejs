<body>
  <%= styles %>
  <script type="text/javascript">
    'use strict';
    var Conditionals = function (e) { var t = {}; function i(n) { if (t[n]) return t[n].exports; var r = t[n] = { i: n, l: !1, exports: {} }; return e[n].call(r.exports, r, r.exports, i), r.l = !0, r.exports } return i.m = e, i.c = t, i.d = function (e, t, n) { i.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: n }) }, i.r = function (e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) }, i.t = function (e, t) { if (1 & t && (e = i(e)), 8 & t) return e; if (4 & t && "object" == typeof e && e && e.__esModule) return e; var n = Object.create(null); if (i.r(n), Object.defineProperty(n, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e) for (var r in e) i.d(n, r, function (t) { return e[t] }.bind(null, r)); return n }, i.n = function (e) { var t = e && e.__esModule ? function () { return e.default } : function () { return e }; return i.d(t, "a", t), t }, i.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) }, i.p = "", i(i.s = 0) }([function (e, t, i) { "use strict"; Object.defineProperty(t, "__esModule", { value: !0 }); class n { constructor(e) { this.args = e, this.control = document.querySelector(e.control), null !== this.control && ("OPTION" === this.control.tagName && (this.control = this.control.parentElement), this.toggleClass = this.args.toggleClass, this.inputType = this.getInputType(), "checkbox" === this.inputType || "radio" === this.inputType ? (this.onChangeBound = this.onChangeMulti.bind(this), this.setVisibleMulti(this.multiInputValue()), Array.from(document.getElementsByName(this.control.name)).forEach(e => { e.addEventListener("change", this.onChangeBound) })) : (this.setVisible(this.inputValue()), this.onChangeBound = this.onChange.bind(this), this.control.addEventListener("change", this.onChangeBound))) } static toggleRequired(e, t) { t ? (e.setAttribute("data-required", "true"), e.removeAttribute("required")) : e.setAttribute("required", "") } onChange() { const e = this.inputValue(); this.setVisible(e) } onChangeMulti() { const e = this.multiInputValue(); this.setVisibleMulti(e) } setVisible(e) { Object.keys(this.args.visibility).forEach(t => { const i = document.querySelector(this.args.visibility[t].split(" ")[0]), r = i.required || i.dataset.required; e === t.replace(" ", "_") ? (i.parentElement.classList.remove(this.toggleClass), r && n.toggleRequired(i, !1)) : (i.parentElement.classList.add(this.toggleClass), r && n.toggleRequired(i, !0)) }) } setVisibleMulti(e) { Object.keys(this.args.visibility).forEach(t => { const i = this.args.visibility[t].split(" "), r = document.querySelector(i[0] + " + label"), s = document.querySelector(i[0]); Array.from(document.getElementsByName(s.name)).map(s => { const o = s.required || s.dataset.required; e.includes(t) ? (s.setAttribute("id", i[1] + "_field"), r.setAttribute("for", i[1] + "_field"), s.parentElement.classList.remove(this.toggleClass), o && n.toggleRequired(s, !1)) : (s.parentElement.classList.add(this.toggleClass), o && n.toggleRequired(s, !0)) }) }) } getInputType() { const e = this.control.tagName.toLowerCase(); return "input" === e ? this.control.type : e } multiInputValue() { return Array.from(document.getElementsByName(this.control.name)).filter(e => e.checked).map(e => e.value) } inputValue() { return this.control.value } destroy() { this.control.removeEventListener("change", this.onChangeBound) } } t.default = n }]);
    function registerElements(elements, formName, formId) {
      var formClass = '.form__' + formId;
      var formElement = document.querySelector(formClass);
      // If the form has not been created
      if(!formElement) {
        return;
      }
      var hiddenClass = 'hidden__' + formId;
      var form = formElement.querySelector('form');
      // If the form already has onsubmit
      if(form.onsubmit) {
        return;
      }
      var error = form.querySelector('.error__' + formId);
      var errorMessage = error.querySelector('.message__' + formId);

      function enableInputs() {
        Array.prototype.forEach.call(
          form.querySelectorAll(
            "input[type='text'], input[type='email'], input[type='tel']"
          ),
          function (input) {
            input.removeAttribute('disabled');
          }
        );
      }

      function disableInputs() {
        Array.prototype.forEach.call(
          form.querySelectorAll(
            "input[type='text'], input[type='email'], input[type='tel']"
          ),
          function (input) {
            input.setAttribute('disabled', 'true');
          }
        );
      }

      // Listen for errors from each Element, and show error messages in the UI.
      var savedErrors = {};
      Array.prototype.forEach.call(elements, function (element, idx) {
        element.addEventListener('change', function (event) {
          if (element.type === 'checkbox') {
            var boxes = Array.from(document.getElementsByName(element.name));
            var required = boxes.find(box => box.required);
            if (required) {
              var checked = Array.prototype.some.call(boxes, function (box) {
                return box.checked;
              });
              boxes = Array.prototype.filter.call(boxes, function (box) {
                return box.tagName.toLowerCase() === 'input' && !box.checked;
              });

              if (checked) {
                Array.prototype.forEach.call(boxes, function (box) {
                  box.removeAttribute('required');
                  box.classList.remove('invalid__' + formId);
                });
              } else {
                Array.prototype.forEach.call(boxes, function (box) {
                  box.setAttribute('required', '');
                  box.classList.add('invalid__' + formId);
                })
              }
            }
          }

          if (!event.target.validity.valid) {
            error.classList.add('visible__' + formId);
            savedErrors[idx] = event.target.validationMessage;
            errorMessage.innerText = event.target.validationMessage;
            element.classList.add('invalid__' + formId);
          } else {
            savedErrors[idx] = null;
            element.classList.remove('invalid__' + formId);

            // Loop over the saved errors and find the first one, if any.
            var nextError = Object.keys(savedErrors)
              .sort()
              .reduce(function (maybeFoundError, key) {
                return maybeFoundError || savedErrors[key];
              }, null);

            if (nextError) {
              // Now that they've fixed the current error, show another one.
              errorMessage.innerText = nextError;
            } else {
              // The user fixed the last error; no more errors.
              error.classList.remove('visible__' + formId);
            }
          }
        });
      });
      
      // Handles form submission
      function handleSubmit(e) {
        e.preventDefault();

        var submittedClass = 'submitted__' + formId;
        // Do not submit if submitted, here because multiple forms can exist on one page
        if (formElement.className.indexOf(submittedClass) !== -1) {
          return;
        }

        // Show a submission screen...
        formElement.classList.add(submittedClass);
        disableInputs();

        var formData = {};

        Array.prototype.forEach.call(elements, function (element) {
          var classList = Array.from(element.classList);
          if (!classList.includes(hiddenClass)) {
            if (element.type === 'radio' || element.type === 'checkbox') {
              if (element.checked) {
                if (!formData[element.name]) {
                  formData[element.name] = element.value;
                } else {
                  formData[element.name] = [formData[element.name], element.value];
                }
              }
            }

            if (element.type !== 'radio' && element.type !== 'checkbox') {
              if (!formData[element.name]) {
                formData[element.name] = element.value;
              } else {
                formData[element.name] = [formData[element.name], element.value];
              }
            }
          }
        })

        formData.api_key = formId;
        var http = new XMLHttpRequest();
        var url = '${process.env.INTAKE_URL}';
        var telescopeMatch = document.cookie.match(new RegExp('(^| )' + 'telescope_id' + '=([^;]+)'));
        var match = document.cookie.match(new RegExp('(^| )' + 'heirial2' + '=([^;]+)'));
        if (telescopeMatch) {
          formData.telescope_id = telescopeMatch[2];
        } else if (match) {
          formData.telescope_id = match[2];
        }

        formData = JSON.stringify(formData);
        http.open("POST", url, true);

        http.setRequestHeader("Content-type", "application/json");

        http.onreadystatechange = function () {
          enableInputs();
        }
        http.send(formData);

      };

      form.onsubmit = handleSubmit;
    }</script>
  <%= html %>
  <%= conditionals %>
  <script type="text/javascript">
    (function () {
      'use strict';

      var forms = Array.prototype.slice.call(document.querySelectorAll('.shuttle-form'));
      Array.prototype.forEach.call(forms, function (form) {
        var formId = form.getAttribute('data-id');
        if (formId) {
          // Floating labels
          var inputs = form.querySelectorAll('.cell__' + formId + '.shuttle__' + formId + '.form__' + formId + ' input,' +
            ' .cell__' + formId + '.shuttle__' + formId + '.form__' + formId + ' textarea, .cell__' + formId + '.shuttle__' + formId + '.form__' + formId + ' select');
          registerElements(inputs, 'shuttle-form', formId);
          Array.prototype.forEach.call(inputs, function (input) {
            input.addEventListener('focus', function () {
              input.classList.add('focused__' + formId);
            });
            input.addEventListener('blur', function () {
              input.classList.remove('focused__' + formId);
            });
            input.addEventListener('keyup', function () {
              if (input.value.length === 0) {
                input.classList.add('empty__' + formId);
              } else {
                input.classList.remove('empty__' + formId);
              }
            });
          });
        }
      })
    })();
  </script>
</body>
